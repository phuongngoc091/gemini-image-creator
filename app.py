import streamlit as st
import google.generativeai as genai
from PIL import Image
from io import BytesIO

# --- C·∫•u h√¨nh trang v√† ti√™u ƒë·ªÅ ---
st.set_page_config(layout="wide", page_title="Tr√¨nh t·∫°o ·∫£nh AI S·ª≠ thi")
st.title("üé® Tr√¨nh t·∫°o ·∫£nh AI S·ª≠ thi")

# --- PROMPT M·∫™U ƒê√É C·∫¨P NH·∫¨T ---
# ƒê√¢y l√† prompt m·∫´u chi ti·∫øt do b·∫°n cung c·∫•p.
# √ù t∆∞·ªüng c·ªßa ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c ch√®n v√†o v·ªã tr√≠ {user_prompt}.
BASE_PROMPT_TEMPLATE = """
A hyperrealistic cinematic scene of {user_prompt}. The figure's uniform is worn yet dignified, with determination in their serious expression. Behind them, the silhouettes of people appear blurred and hazy, representing the united strength of the nation. The atmosphere is intense and patriotic, with dramatic lighting, dust and sunlight filtering through the air, creating a historic and monumental mood. Ultra-detailed, photorealistic, 8K resolution, cinematic composition, dark yet hopeful tones.
"""

# --- C·∫•u h√¨nh API Key ·ªü thanh b√™n (sidebar) ---
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    try:
        google_api_key = st.secrets["GOOGLE_API_KEY"]
        st.success("ƒê√£ t√¨m th·∫•y API Key!", icon="‚úÖ")
    except (FileNotFoundError, KeyError):
        st.warning("Kh√¥ng t√¨m th·∫•y API Key trong Secrets. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.", icon="‚ö†Ô∏è")
        google_api_key = st.text_input("Nh·∫≠p Google API Key c·ªßa b·∫°n:", type="password")

if not google_api_key:
    st.error("Vui l√≤ng nh·∫≠p API Key c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

try:
    genai.configure(api_key=google_api_key)
except Exception as e:
    st.error(f"L·ªói c·∫•u h√¨nh API Key: {e}")
    st.stop()

# --- B·ªë c·ª•c 2 c·ªôt ---
col1, col2 = st.columns([1, 3])

# --- C·ªòT TR√ÅI (B·∫£ng ƒëi·ªÅu khi·ªÉn) ---
with col1:
    st.subheader("üñºÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn")
    uploaded_file = st.file_uploader(
        "T·∫£i ·∫£nh l√™n (t√πy ch·ªçn)",
        type=["png", "jpg", "jpeg"],
        help="T·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ AI tham kh·∫£o ho·∫∑c ch·ªânh s·ª≠a theo m√¥ t·∫£ c·ªßa b·∫°n."
    )
    if uploaded_file is not None:
        image_to_display = Image.open(uploaded_file)
        st.image(image_to_display, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
    aspect_ratio = st.selectbox(
        "üìê T·ªâ l·ªá ·∫£nh",
        ("T·ª± ƒë·ªông", "16:9 (Ngang)", "1:1 (Vu√¥ng)", "4:5 (D·ªçc)", "9:16 (D·ªçc cao)")
    )

# --- C·ªòT PH·∫¢I (Prompt v√† K·∫øt qu·∫£) ---
with col2:
    st.subheader("‚ú® S√°ng t·∫°o")
    with st.form("prompt_form"):
        user_prompt = st.text_area(
            "üìù Nh·∫≠p √Ω t∆∞·ªüng ch√≠nh c·ªßa b·∫°n:",
            height=200,
            placeholder="V√≠ d·ª•: a Vietnamese soldier standing proudly in front of a large red flag with a golden star. Beside him is a heavy tank, symbolizing strength and liberation"
        )
        submitted = st.form_submit_button("T·∫°o ·∫£nh")

    if submitted:
        if not user_prompt:
            st.warning("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng c·ªßa b·∫°n.")
        else:
            # --- T·∫†O PROMPT CH√çNH TH·ª®C ---
            # K·∫øt h·ª£p prompt m·∫´u v·ªõi m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng
            final_prompt = BASE_PROMPT_TEMPLATE.format(user_prompt=user_prompt)

            # Hi·ªÉn th·ªã prompt ch√≠nh th·ª©c cho ng∆∞·ªùi d√πng xem
            with st.expander("üîç Xem prompt ch√≠nh th·ª©c ƒë∆∞·ª£c g·ª≠i ƒë·∫øn AI"):
                st.write(final_prompt)

            with st.spinner("AI ƒëang s√°ng t·∫°o, vui l√≤ng ch·ªù..."):
                try:
                    content_parts = []
                    if uploaded_file is not None:
                        uploaded_image = Image.open(uploaded_file)
                        content_parts.append(uploaded_image)
                    
                    # S·ª≠ d·ª•ng final_prompt thay v√¨ user_prompt
                    content_parts.append(final_prompt) 

                    model = genai.GenerativeModel(model_name="gemini-2.5-flash")
                    response = model.generate_content(
                        content_parts,
                        generation_config={"response_mime_type": "image/jpeg"}
                    )
                    image_data = response.parts[0].blob.data
                    generated_image = Image.open(BytesIO(image_data))
                    st.image(generated_image, caption="·∫¢nh t·∫°o ra", use_column_width=True)
                    st.download_button(
                        label="T·∫£i ·∫£nh xu·ªëng",
                        data=image_data,
                        file_name="generated_image.jpg",
                        mime="image/jpeg"
                    )
                except Exception as e:
                    st.error(f"R·∫•t ti·∫øc, ƒë√£ x·∫£y ra l·ªói: {e}")
