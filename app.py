import streamlit as st
import google.generativeai as genai
from PIL import Image
import json

# --- C·∫•u h√¨nh trang v√† ti√™u ƒë·ªÅ ---
st.set_page_config(layout="wide", page_title="Tr·ª£ l√Ω S√°ng t·∫°o Video AI")
st.title("üé¨ Tr·ª£ l√Ω S√°ng t·∫°o Video AI")
st.caption("T·∫°o k·ªãch b·∫£n video chi ti·∫øt t·ª´ √Ω t∆∞·ªüng ƒë∆°n gi·∫£n c·ªßa b·∫°n.")

# --- C√ÅC KHU√îN M·∫™U PROMPT (TEMPLATES) ---

# Khu√¥n m·∫´u cho Option 1 (T·∫£i ·∫£nh l√™n)
IMAGE_TO_VIDEO_TEMPLATE = """
Initial Frame: Use the provided image of {subject_description}.

Animation:
- Movement: Animate the subject to {core_action}.
- Speech: {dialogue_section}
- Gesture: While speaking or moving, the subject makes a natural gesture, such as {gesture}.
- Continued Movement: After the main action, the subject continues their action naturally to complete the scene.

Visual Effects: Maintain the atmosphere, lighting, and environmental effects from the original image. Ensure effects like {visual_effects} are animated and consistent throughout the 8-second clip.

Audio: {audio_section}
"""

# Khu√¥n m·∫´u cho Option 2 (Ch·ªâ c√≥ √Ω t∆∞·ªüng)
TEXT_TO_VIDEO_TEMPLATE = """
Scene Description: A cinematic, ultra-detailed, 8k, photorealistic shot of {subject_description}. The setting is {setting_description}. The lighting is dramatic and fits the mood.

Animation:
- Movement: Animate the subject to {core_action}.
- Speech: {dialogue_section}
- Gesture: While speaking or moving, the subject makes a natural gesture, such as {gesture}.
- Continued Movement: After the main action, the subject continues their action naturally to complete the scene.

Visual Effects: The atmosphere is {mood}. Create realistic environmental effects like {visual_effects} for the 8-second clip.

Audio: {audio_section}
"""

# --- SI√äU PROMPT D√ÄNH CHO "BI√äN K·ªäCH AI" ---
# ƒê√¢y l√† ch·ªâ d·∫´n ch√∫ng ta g·ª≠i cho Gemini ƒë·ªÉ ph√¢n t√≠ch √Ω t∆∞·ªüng c·ªßa ng∆∞·ªùi d√πng
META_PROMPT_FOR_GEMINI = """
Analyze the following user's video idea, which is in Vietnamese. Your task is to act as a creative director and scriptwriter.
Extract key information, translate it into English, and format the output as a single, clean JSON object.

RULES:
1.  Translate all extracted values to English, EXCEPT for the 'dialogue' field.
2.  The 'dialogue' field must be processed:
    - If the user provides dialogue, rewrite it to be more natural, engaging, and concise enough to be spoken clearly in under 8 seconds. KEEP IT IN VIETNAMESE.
    - If the user does not provide any dialogue, the value for 'dialogue' must be an empty string "".
3.  Provide reasonable, creative default values in English for any fields that are not mentioned in the user's idea.

User's Idea: "{user_idea}"

JSON fields to extract:
-   "subject_description": (Translate to English) A brief description of the main character or subject.
-   "core_action": (Translate to English) The primary action the subject is performing.
-   "setting_description": (Translate to English) The location where the action takes place.
-   "dialogue": (Keep in Vietnamese and rewrite for clarity and brevity < 8s) The spoken words.
-   "tone": (Translate to English) The emotional tone of the speech (e.g., 'friendly', 'dramatic', 'joyful').
-   "language": (Keep 'Vietnamese' if dialogue exists, otherwise 'None') The language of the dialogue.
-   "voice_type": (Translate to English) The type of voice speaking (e.g., 'a young female voice', 'a deep male voice').
-   "gesture": (Translate to English) A simple, natural gesture the subject could make that fits the action and dialogue.
-   "visual_effects": (Translate to English) Any relevant visual effects (e.g., 'falling snow', 'sunlight filtering through leaves').
-   "mood": (Translate to English) The overall atmosphere of the scene (e.g., 'patriotic', 'serene', 'mysterious').
"""

# --- C·∫•u h√¨nh API Key ·ªü thanh b√™n (sidebar) ---
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    try:
        google_api_key = st.secrets["GOOGLE_API_KEY"]
        st.success("ƒê√£ t√¨m th·∫•y API Key!", icon="‚úÖ")
    except (FileNotFoundError, KeyError):
        st.warning("Kh√¥ng t√¨m th·∫•y API Key trong Secrets. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.", icon="‚ö†Ô∏è")
        google_api_key = st.text_input("Nh·∫≠p Google API Key c·ªßa b·∫°n:", type="password")

if not google_api_key:
    st.error("Vui l√≤ng nh·∫≠p API Key c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

try:
    genai.configure(api_key=google_api_key)
    gemini_model = genai.GenerativeModel(model_name="gemini-2.5-flash")
except Exception as e:
    st.error(f"L·ªói c·∫•u h√¨nh API Key: {e}")
    st.stop()

# --- Giao di·ªán ·ª©ng d·ª•ng ---
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üñºÔ∏è ƒê·∫ßu v√†o")
    uploaded_file = st.file_uploader(
        "T·∫£i ·∫£nh l√™n (cho t√πy ch·ªçn ·∫¢nh -> Video)",
        type=["png", "jpg", "jpeg"]
    )
    if uploaded_file is not None:
        image_to_display = Image.open(uploaded_file)
        st.image(image_to_display, caption="Khung h√¨nh kh·ªüi ƒë·∫ßu", use_column_width=True)

with col2:
    st.subheader("üí° √ù t∆∞·ªüng c·ªßa b·∫°n")
    with st.form("prompt_form"):
        user_idea = st.text_area(
            "Nh·∫≠p √Ω t∆∞·ªüng video b·∫±ng ti·∫øng Vi·ªát:",
            height=200,
            placeholder="V√≠ d·ª•: m·ªôt c√¥ g√°i ƒëi tr√™n C·∫ßu V√†ng c√≥ tuy·∫øt r∆°i v√† n√≥i 'Ch√†o m·ªçi ng∆∞·ªùi! Tuy·∫øt r∆°i ƒë·∫πp kh√¥ng?'"
        )
        submitted = st.form_submit_button("T·∫°o k·ªãch b·∫£n Prompt")

    if submitted:
        if not user_idea:
            st.warning("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng c·ªßa b·∫°n.")
        else:
            with st.spinner("ü§ñ Bi√™n k·ªãch AI ƒëang ph√¢n t√≠ch v√† s√°ng t·∫°o..."):
                try:
                    # B∆∞·ªõc 1: G·ª≠i y√™u c·∫ßu ph√¢n t√≠ch ƒë·∫øn Gemini
                    request_for_gemini = META_PROMPT_FOR_GEMINI.format(user_idea=user_idea)
                    response = gemini_model.generate_content(request_for_gemini)
                    
                    # Tr√≠ch xu·∫•t v√† l√†m s·∫°ch JSON t·ª´ ph·∫£n h·ªìi
                    response_text = response.text.replace("```json", "").replace("```", "").strip()
                    extracted_data = json.loads(response_text)

                    # B∆∞·ªõc 2: L·∫Øp r√°p prompt cu·ªëi c√πng
                    final_prompt = ""
                    if uploaded_file is not None:
                        # Option 1: C√≥ ·∫£nh
                        template = IMAGE_TO_VIDEO_TEMPLATE
                    else:
                        # Option 2: Ch·ªâ c√≥ text
                        template = TEXT_TO_VIDEO_TEMPLATE
                    
                    # X·ª≠ l√Ω ph·∫ßn l·ªùi tho·∫°i v√† √¢m thanh ƒë·ªÉ c√≥ th·ªÉ ·∫©n ƒëi n·∫øu kh√¥ng c√≥
                    if extracted_data.get("dialogue"):
                        extracted_data['dialogue_section'] = f"Animate the subject's mouth to synchronize with the speech: \"{extracted_data['dialogue']}\"."
                        extracted_data['audio_section'] = f"Generate natural-sounding {extracted_data['language']} speech for the dialogue, spoken by a {extracted_data['voice_type']} with a {extracted_data['tone']} tone."
                    else:
                        extracted_data['dialogue_section'] = "No dialogue."
                        extracted_data['audio_section'] = "No speech audio, only ambient sounds matching the scene."

                    final_prompt = template.format(**extracted_data)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.divider()
                    st.subheader("üé¨ K·ªãch b·∫£n Prompt chi ti·∫øt (Ti·∫øng Anh)")
                    st.info("ƒê√¢y l√† prompt ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ g·ª≠i ƒë·∫øn AI t·∫°o video (nh∆∞ Veo).")
                    st.text_area("Prompt cu·ªëi c√πng:", value=final_prompt, height=400)

                except json.JSONDecodeError:
                    st.error("L·ªói: AI kh√¥ng tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi √Ω t∆∞·ªüng r√µ r√†ng h∆°n.")
                    st.write("D·ªØ li·ªáu th√¥ t·ª´ AI:", response_text)
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

---
## ## C·∫≠p nh·∫≠t file `requirements.txt`
H√£y ƒë·∫£m b·∫£o file `requirements.txt` c·ªßa b·∫°n c√≥ ƒë·ªß c√°c th∆∞ vi·ªán sau:
